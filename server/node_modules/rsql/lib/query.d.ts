import { Expression } from './expression';
import { IArray } from './types';
export default class Query {
    private projections;
    private conditions;
    private sorts;
    private max;
    select: (...args: string[]) => this;
    filter: (...args: (IArray | Expression)[]) => this;
    sort: (...args: string[]) => this;
    limit: (num: number) => this;
    qs: () => string;
}
export declare const or: (...args: (IArray | Expression)[]) => IArray;
export declare const and: (...args: (IArray | Expression)[]) => IArray;
export declare const eq: (field: string, value: string | number | boolean) => Expression;
export declare const ne: (field: string, value: string | number | boolean) => Expression;
export declare const gt: (field: string, value: string | number | boolean) => Expression;
export declare const gte: (field: string, value: string | number | boolean) => Expression;
export declare const lt: (field: string, value: string | number | boolean) => Expression;
export declare const lte: (field: string, value: string | number | boolean) => Expression;
export declare const like: (field: string, value: string | number | boolean) => Expression;
export declare const notLike: (field: string, value: string | number | boolean) => Expression;
export declare const includes: (field: string, value: (string | number | boolean)[]) => Expression;
export declare const notIncludes: (field: string, value: (string | number | boolean)[]) => Expression;
export declare const select: (...args: string[]) => Query;
export declare const filter: (...args: (IArray | Expression)[]) => Query;
export declare const sort: (...args: string[]) => Query;
export declare const limit: (num: number) => Query;
